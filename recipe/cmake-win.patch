diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2c78b9e..feaba2c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,13 +10,13 @@ if(NOT WIN32)
   message(FATAL_ERROR "This file is only targeting Windows builds - aborting!")
 endif(NOT WIN32)
 
+find_package(Boost COMPONENTS python REQUIRED)
+
+
 add_definitions(-DWIN32)
-add_definitions(-DNDEBUG)
-add_definitions(-D_WINSTATIC)
 add_definitions(-DNPY_NO_DEPRECATED_API)
-add_definitions(-DBOOST_PYTHON_STATIC_LIB)
-add_definitions(-DBOOST_ALL_NO_LIB)
-add_definitions(-DZMQ_STATIC)
+add_definitions(-DBOOST_ALL_DYN_LINK)
+add_definitions("/EHsc")
 
 if(CMAKE_SIZEOF_VOID_P EQUAL 8)
   set(PY_TARGET "64")
@@ -126,74 +126,45 @@ set(HEADERS
         ext/tgutils.h
         ext/to_py.h)
 
-set(${PROJECT_NAME} INCLUDE_DIRS "$ENV{TANGO_ROOT}/include")
+set(${PROJECT_NAME} INCLUDE_DIRS "${TANGO_ROOT}/include")
 
-if(MSVC90)
-  # v9 used for Python 2
-  set(VCSTR "90")
-  set(BOOST_VERSION_ "1_70")
-elseif(MSVC14)
-  # v14 used for Python 3
-  set(VCSTR "140")
-  set(BOOST_VERSION_ "1_73")
-endif()
-set(ZMQ_VERSION_ "4_0_5")
 
-set(RELEASE "Release_$ENV{PYTHON_VER}_${PY_TARGET}")
 include_directories(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/ext")
-include_directories(${PROJECT_NAME} PUBLIC "$ENV{BOOST_ROOT}/include/boost-${BOOST_VERSION_}")
-include_directories(${PROJECT_NAME} PUBLIC "$ENV{PYTHON_ROOT}/include")
-include_directories(${PROJECT_NAME} PUBLIC "$ENV{TANGO_ROOT}/include")
-include_directories(${PROJECT_NAME} PUBLIC "$ENV{PYTHON_ROOT}/Lib/site-packages/numpy/core/include")
-link_directories("$ENV{TANGO_ROOT}/bin")
-link_directories("$ENV{TANGO_ROOT}/lib")
-link_directories("$ENV{PYTHON_ROOT}/libs")
-link_directories("$ENV{BOOST_ROOT}/lib")
-message("TANGO at: $ENV{TANGO_ROOT}")
-message("BOOST at: $ENV{BOOST_ROOT}")
-message("PYTHON at: $ENV{PYTHON_ROOT}")
-message("Release at: ${CMAKE_CURRENT_SOURCE_DIR}/${RELEASE}")
-add_compile_options(/MT)
+include_directories(${PROJECT_NAME} PUBLIC "${PYTHON_ROOT}/include")
+include_directories(${PROJECT_NAME} PUBLIC "${TANGO_PKG_INCLUDE_DIRS}")
+include_directories(${PROJECT_NAME} PUBLIC "${Boost_INCLUDE_DIRS}")
+include_directories(${PROJECT_NAME} PUBLIC "${PYTHON_ROOT}/Lib/site-packages/numpy/core/include")
+link_directories("${TANGO_ROOT}/bin")
+link_directories("${TANGO_ROOT}/lib")
+link_directories("${PYTHON_ROOT}/libs")
+message("TANGO at: ${TANGO_ROOT}")
+message("PYTHON at: ${PYTHON_ROOT}")
+add_compile_options(/MD)
 add_library(${PROJECT_NAME} SHARED ${SOURCES} ${HEADERS})
-target_compile_options(${PROJECT_NAME} PUBLIC "/MT")
+target_compile_options(${PROJECT_NAME} PUBLIC "/MD")
 set_target_properties( ${PROJECT_NAME}
   PROPERTIES
   SUFFIX ".pyd" )
 set_target_properties(${PROJECT_NAME}
   PROPERTIES
-  COMPILE_OPTIONS "MT" )
-set_target_properties(${PROJECT_NAME}
-  PROPERTIES
-  ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/${RELEASE}/tango"
-  LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/${RELEASE}/tango"
-  RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/${RELEASE}/tango")
+  COMPILE_OPTIONS "MD" )
 
 if(MSVC90 AND (CMAKE_SIZEOF_VOID_P EQUAL 8))
   # resolve VC 9 64bits complains
   set_source_files_properties(ext/base_types.cpp PROPERTIES COMPILE_FLAGS /bigobj)
 endif()
 
-add_custom_command(TARGET ${PROJECT_NAME}
-  POST_BUILD
-  COMMAND "$ENV{PYTHON_ROOT}/python.exe"  ARGS "${CMAKE_CURRENT_SOURCE_DIR}/winsetup.py" ${RELEASE} dist temp_dist $(ConfigurationName) $(PlatformName)
-  COMMENT "Building installer")
-
 
 install(TARGETS ${PROJECT_NAME}
   ARCHIVE DESTINATION lib
   RUNTIME DESTINATION bin)
 
 set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_OPTIONS "/bigobj")
-set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_OPTIONS "/MT")
-set_property(TARGET ${PROJECT_NAME} PROPERTY LINK_FLAGS "/LTCG /force:multiple /DYNAMICBASE:NO /OPT:REF /OPT:ICF /SUBSYSTEM:WINDOWS")
+set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_OPTIONS "/MD")
 target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
-target_link_libraries(${PROJECT_NAME} PUBLIC $ENV{TANGO_ROOT}/lib/libtango.lib
-                                             $ENV{TANGO_ROOT}/lib/omniORB4.lib
-                                             $ENV{TANGO_ROOT}/lib/omniDynamic4.lib
-                                             $ENV{TANGO_ROOT}/lib/COS4.lib
-                                             $ENV{TANGO_ROOT}/lib/omnithread.lib)
+target_link_libraries(${PROJECT_NAME} PUBLIC tango omniORB4_rt omniDynamic4_rt COS4_rt omnithread_rt)
+target_link_libraries(${PROJECT_NAME} PUBLIC libzmq-mt-4_3_4)
 target_link_libraries(${PROJECT_NAME} PUBLIC ws2_32 mswsock advapi32 comctl32 odbc32)
-target_link_libraries(${PROJECT_NAME} PUBLIC $ENV{TANGO_ROOT}/lib/pthreadVC2.lib)
-target_link_libraries(${PROJECT_NAME} PUBLIC $ENV{TANGO_ROOT}/lib/libzmq-v${VCSTR}-mt-s-${ZMQ_VERSION_}.lib)
-target_link_libraries(${PROJECT_NAME} PUBLIC $ENV{BOOST_ROOT}/lib/libboost_python$ENV{PYTHON_VER}-vc${VCSTR}-mt-s-x${PY_TARGET}-${BOOST_VERSION_}.lib)
-target_link_libraries(${PROJECT_NAME} PUBLIC $ENV{PYTHON_ROOT}/libs/python$ENV{PYTHON_VER}.lib)
+target_link_libraries(${PROJECT_NAME} PUBLIC pthread)
+target_link_libraries(${PROJECT_NAME} PUBLIC boost_python${PYTHON_VER})
+target_link_libraries(${PROJECT_NAME} PUBLIC python${PYTHON_VER})
diff --git a/setup.py b/setup.py
index e582210..b991322 100644
--- a/setup.py
+++ b/setup.py
@@ -13,6 +13,7 @@
 
 import os
 import sys
+import pathlib
 import runpy
 import struct
 import subprocess
@@ -20,14 +21,11 @@ import json
 
 from ctypes.util import find_library
 
+from distutils.file_util import copy_file
 from setuptools import setup, Extension
 from setuptools import Command
 from setuptools.command.build_ext import build_ext as dftbuild_ext
-from setuptools.command.install import install
 
-from distutils.command.build import build as dftbuild
-from distutils.unixccompiler import UnixCCompiler
-from distutils.version import LooseVersion as V
 
 # numpy is only required when compiling, not when building the sdist for example
 try:
@@ -213,84 +211,32 @@ def add_lib_boost(dirs):
     dirs["libraries"].append(boost_library_name)
 
 
-class build(dftbuild):
+class PrebuiltExtension(Extension):
+    def __init__(self, input_file, *args, **kw):
+        name = pathlib.Path(input_file).stem
+        if not os.path.exists(input_file):
+            raise ValueError(f'Prebuilt extension file not found\n{input_file}')
+        self.input_file = input_file
+        super().__init__(name, sources=[], *args, **kw)
 
-    user_options = list(dftbuild.user_options)
 
-    # Strip library option
-    user_options.append(
-        (
-            "strip-lib",
-            None,
-            "strips the shared library of debugging symbols"
-            " (Unix like systems only)",
-        )
-    )
-
-    boolean_options = dftbuild.boolean_options + ["strip-lib"]
-
-    def initialize_options(self):
-        dftbuild.initialize_options(self)
-        self.strip_lib = None
-        self.no_doc = None
-
-    def finalize_options(self):
-        dftbuild.finalize_options(self)
+class prebuilt_binary(dftbuild_ext):
 
     def run(self):
-        dftbuild.run(self)
-        if self.strip_lib:
-            self.strip_debug_symbols()
-
-    def strip_debug_symbols(self):
-        if not POSIX:
-            return
-        if os.system("type objcopy") != 0:
-            return
-        d = abspath(self.build_lib, "tango")
-        orig_dir = os.path.abspath(os.curdir)
-        so = "_tango.so"
-        dbg = so + ".dbg"
-        try:
-            os.chdir(d)
-            stripped_cmd = 'file %s | grep -q "not stripped" || exit 1' % so
-            not_stripped = os.system(stripped_cmd) == 0
-            if not_stripped:
-                os.system("objcopy --only-keep-debug %s %s" % (so, dbg))
-                os.system("objcopy --strip-debug --strip-unneeded %s" % (so,))
-                os.system("objcopy --add-gnu-debuglink=%s %s" % (dbg, so))
-                os.system("chmod -x %s" % (dbg,))
-        finally:
-            os.chdir(orig_dir)
-
-
-class build_ext(dftbuild_ext):
-    def build_extensions(self):
-        self.use_cpp_0x = False
-        if isinstance(self.compiler, UnixCCompiler):
-            compiler_pars = self.compiler.compiler_so
-            while "-Wstrict-prototypes" in compiler_pars:
-                del compiler_pars[compiler_pars.index("-Wstrict-prototypes")]
-            # self.compiler.compiler_so = " ".join(compiler_pars)
-
-            # mimic tango check to activate C++0x extension
-            compiler = self.compiler.compiler
-            proc = subprocess.Popen(compiler + ["-dumpversion"], stdout=subprocess.PIPE)
-            pipe = proc.stdout
-            proc.wait()
-            gcc_ver = pipe.readlines()[0].decode().strip()
-            if V(gcc_ver) >= V("4.3.3"):
-                self.use_cpp_0x = True
-        dftbuild_ext.build_extensions(self)
-
-    def build_extension(self, ext):
-        if self.use_cpp_0x:
-            ext.extra_compile_args += ["-std=c++14"]
-            ext.define_macros += [("PYTANGO_HAS_UNIQUE_PTR", "1")]
-        ext.extra_compile_args += [
-            "-Wno-deprecated-declarations",
-        ]
-        dftbuild_ext.build_extension(self, ext)
+        for ext in self.extensions:
+            fullname = self.get_ext_fullname(ext.name)
+            filename = self.get_ext_filename(fullname)
+            dest_path = pathlib.Path(self.build_lib) / "tango"
+            if not dest_path.exists():
+                dest_path.mkdir(parents=True)
+            dest_filename = dest_path / os.path.basename(filename)
+
+            copy_file(
+                ext.input_file, dest_filename, verbose=self.verbose,
+                dry_run=self.dry_run
+            )
+        if self.inplace:
+            self.copy_extensions_to_source()
 
 
 class check_tests_errors(Command):
@@ -333,28 +279,6 @@ class check_tests_errors(Command):
 
 def setup_args():
 
-    directories = {
-        "include_dirs": [],
-        "library_dirs": [],
-        "libraries": [],
-    }
-    sys_libs = []
-    add_lib("tango", directories, sys_libs, lib_name="tango")
-    add_lib("omni", directories, sys_libs, lib_name="omniORB4")
-    add_lib("zmq", directories, sys_libs, lib_name="libzmq")
-    add_lib_boost(directories)
-
-    macros = []
-    # special numpy configuration (only needed at build time)
-    if numpy is not None:
-        directories["include_dirs"].append(numpy.get_include())
-
-        macros.append(("PYTANGO_NUMPY_VERSION", numpy.__version__))
-        macros.append(("NPY_NO_DEPRECATED_API", "0"))
-
-    if POSIX or MACOS:
-        directories = pkg_config(*sys_libs, **directories)
-
     Release = get_release_info()
 
     author = Release.authors["Coutinho"]
@@ -453,46 +377,10 @@ def setup_args():
         extra_compile_args += ["-g", "-O0"]
         extra_link_args += ["-g", "-O0"]
 
-    src_dir = abspath("ext")
-    client_dir = src_dir
-    server_dir = os.path.join(src_dir, "server")
-
-    clientfiles = sorted(
-        os.path.join(client_dir, fname)
-        for fname in os.listdir(client_dir)
-        if fname.endswith(".cpp")
-    )
-
-    serverfiles = sorted(
-        os.path.join(server_dir, fname)
-        for fname in os.listdir(server_dir)
-        if fname.endswith(".cpp")
-    )
-
-    cppfiles = clientfiles + serverfiles
-    directories["include_dirs"].extend([client_dir, server_dir])
-
-    include_dirs = uniquify(directories["include_dirs"])
-    library_dirs = uniquify(directories["library_dirs"])
-    libraries = uniquify(directories["libraries"])
-
-    pytango_ext = Extension(
-        name="_tango",
-        sources=cppfiles,
-        include_dirs=include_dirs,
-        library_dirs=library_dirs,
-        libraries=libraries,
-        define_macros=macros,
-        extra_compile_args=extra_compile_args,
-        extra_link_args=extra_link_args,
-        language="c++",
-        depends=[],
-    )
+    pytango_ext = PrebuiltExtension(abspath("build/_tango.pyd"))
 
     cmdclass = {
-        "build": build,
-        "build_ext": build_ext,
-        "install": install,
+        "build_ext": prebuilt_binary,
         "check_tests_errors": check_tests_errors,
     }
 
