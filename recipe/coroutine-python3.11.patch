diff --git a/tango/asyncio_executor.py b/tango/asyncio_executor.py
index 38f5059..991a08e 100644
--- a/tango/asyncio_executor.py
+++ b/tango/asyncio_executor.py
@@ -13,7 +13,10 @@
 from __future__ import absolute_import
 
 # Imports
+import collections
 import functools
+import inspect
+import types
 
 # Asyncio imports
 try:
@@ -36,6 +39,42 @@ __all__ = ("AsyncioExecutor", "get_global_executor", "set_global_executor")
 _EXECUTOR = None
 
 
+# Function removed from Python 3.11
+# Taken from https://github.com/python/cpython/blob/3.10/Lib/asyncio/coroutines.py
+# (without the _DEBUG part)
+def coroutine(func):
+    """Decorator to mark coroutines.
+    If the coroutine is not yielded from before it is destroyed,
+    an error message is logged.
+    """
+    if inspect.iscoroutinefunction(func):
+        return func
+
+    if inspect.isgeneratorfunction(func):
+        coro = func
+    else:
+        @functools.wraps(func)
+        def coro(*args, **kw):
+            res = func(*args, **kw)
+            if (asyncio.isfuture(res) or inspect.isgenerator(res)):
+                res = yield from res
+            else:
+                # If 'res' is an awaitable, run it.
+                try:
+                    await_meth = res.__await__
+                except AttributeError:
+                    pass
+                else:
+                    if isinstance(res, collections.abc.Awaitable):
+                        res = yield from await_meth()
+            return res
+
+    coro = types.coroutine(coro)
+    wrapper = coro
+    wrapper._is_coroutine = asyncio.coroutines._is_coroutine  # For iscoroutinefunction().
+    return wrapper
+
+
 def get_global_executor():
     global _EXECUTOR
     if _EXECUTOR is None:
@@ -82,13 +121,13 @@ class AsyncioExecutor(AbstractExecutor):
 
     def submit(self, fn, *args, **kwargs):
         """Submit an operation"""
-        corofn = asyncio.coroutine(lambda: fn(*args, **kwargs))
+        corofn = coroutine(lambda: fn(*args, **kwargs))
         return run_coroutine_threadsafe(corofn(), self.loop)
 
     def execute(self, fn, *args, **kwargs):
         """Execute an operation and return the result."""
         if self.in_executor_context():
-            corofn = asyncio.coroutine(lambda: fn(*args, **kwargs))
+            corofn = coroutine(lambda: fn(*args, **kwargs))
             return corofn()
         future = self.submit(fn, *args, **kwargs)
         return future.result()
